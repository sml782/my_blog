<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>亖 巠 的博客</title>
  
  <subtitle>人在码在，为码？为码！为码。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.sgoldl.top/"/>
  <updated>2018-07-27T11:09:34.663Z</updated>
  <id>http://blog.sgoldl.top/</id>
  
  <author>
    <name>亖 巠</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS简单实现防抖和节流</title>
    <link href="http://blog.sgoldl.top/2018/07/27/js_debounce_throttle/"/>
    <id>http://blog.sgoldl.top/2018/07/27/js_debounce_throttle/</id>
    <published>2018-07-27T09:35:12.000Z</published>
    <updated>2018-07-27T11:09:34.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、什么是防抖和节流"><a href="#一、什么是防抖和节流" class="headerlink" title="一、什么是防抖和节流"></a>一、什么是防抖和节流</h1><p><strong>Ps</strong>: 比如搜索框，用户在输入的时候使用<code>change</code>事件去调用搜索，如果用户每一次输入都去搜索的话，那得消耗多大的服务器资源，即使你的服务器资源很强大，也不带这么玩的。</p><h2 id="1-防抖-debounce"><a href="#1-防抖-debounce" class="headerlink" title="1. 防抖 - debounce"></a>1. 防抖 - debounce</h2><p>其中一种解决方案就是每次用户停止输入后，延迟超过<code>500ms</code>时，才去搜索此时的<code>String</code>，这就是防抖。</p><ul><li>原理：将若干个函数调用合成为一次，并在给定时间过去之后仅被调用一次。</li><li>代码实现：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 维护一个 timer，用来记录当前执行函数状态</span></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过 ‘this’ 和 ‘arguments’ 获取函数的作用域和变量</span></span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="comment">// 清理掉正在执行的函数，并重新执行</span></span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn.apply(context, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> flag = <span class="number">0</span>; <span class="comment">// 记录当前函数调用次数</span></span><br><span class="line"><span class="comment">// 当用户滚动时被调用的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  flag++;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Number of calls: %d'</span>, flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 debounce 中包装我们的函数，过 2 秒触发一次</span></span><br><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'scroll'</span>, debounce(foo, <span class="number">2000</span>));</span><br></pre></td></tr></table></figure><blockquote><ol><li><code>debounce</code>函数封装后，返回内部函数</li><li>每一次事件被触发，都会清除当前的<code>timer</code>然后重新设置超时并调用。这会导致每一次高频事件都会取消前一次的超时调用，导致事件处理程序不能被触发</li><li>只有当高频事件停止，最后一次事件触发的超时调用才能在<code>delay</code>时间后执行</li></ol></blockquote><h2 id="2-节流-throttle"><a href="#2-节流-throttle" class="headerlink" title="2. 节流 - throttle"></a>2. 节流 - throttle</h2><p>另一种解决方案比 <em>防抖</em> 要宽松些，这时我们不想用户一味的输入，而是给用户一些搜索提示，所以在当中限制每过<code>500ms</code>就查询一次此时的<code>String</code>，这就是节流。</p><ul><li>原理：节流函数不管事件触发有多频繁，都会保证在规定时间内一定会执行一次真正的事件处理函数。</li><li>代码实现有两种，一种是时间戳，另一种是定时器<br>1）时间戳实现：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, delay</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> prev = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> args    = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">const</span> now     = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">if</span>(now - prev &gt;= delay)&#123;</span><br><span class="line">      func.apply(context, args);</span><br><span class="line">      prev = <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当高频事件触发时，第一次应该会立即执行（给事件绑定函数与真正触发事件的间隔如果大于<code>delay</code>的话），而后再怎么频繁触发事件，也都是会每<code>delay</code>秒才执行一次。而当最后一次事件触发完毕后，事件也不会再被执行了。</p></blockquote><p>  2）定时器实现：<br>  当触发事件的时候，我们设置一个定时器，再触发事件的时候，如果定时器存在，就不执行；直到<code>delay</code>秒后，定时器执行执行函数，清空定时器，这样就可以设置下个定时器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fucntion throttle(func, delay)&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funtion()&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args    = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span>(!timer)&#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        func.apply(context, args);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当第一次触发事件时，肯定不会立即执行函数，而是在<code>delay</code>秒后才执行。<br>之后连续不断触发事件，也会每<code>delay</code>秒执行一次。<br>当最后一次停止触发后，由于定时器的<code>delay</code>延迟，可能还会执行一次函数。</p></blockquote><p>  3）综合使用时间戳与定时器，完成一个事件触发时立即执行，触发完毕还能执行一次的节流函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, delay</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> startTime = <span class="built_in">Date</span>.now();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> curTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">let</span> remaining = delay - (curTime - startTime);</span><br><span class="line">    <span class="keyword">const</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">const</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    <span class="keyword">if</span>(remaining &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">      func.apply(context,args);</span><br><span class="line">      startTime = <span class="built_in">Date</span>.now();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      timer = setTimeout(func, remaining);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>需要在每个<code>delay</code>时间中一定会执行一次函数，因此在节流函数内部使用开始时间、当前时间与<code>delay</code>来计算<code>remaining</code>，当<code>remaining &lt;= 0</code>时表示该执行函数了，如果还没到时间的话就设定在<code>remaining</code>时间后再触发。当然在<code>remaining</code>这段时间中如果又一次发生事件，那么会取消当前的计时器，并重新计算一个<code>remaining</code>来判断当前状态。</p></blockquote>]]></content>
    
    <summary type="html">
    
      主要针对于时间频繁调用事件而做的性能优化
    
    </summary>
    
      <category term="JS" scheme="http://blog.sgoldl.top/categories/JS/"/>
    
    
      <category term="防抖" scheme="http://blog.sgoldl.top/tags/%E9%98%B2%E6%8A%96/"/>
    
      <category term="节流" scheme="http://blog.sgoldl.top/tags/%E8%8A%82%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript面向对象程序设计</title>
    <link href="http://blog.sgoldl.top/2018/07/02/oop_extend/"/>
    <id>http://blog.sgoldl.top/2018/07/02/oop_extend/</id>
    <published>2018-07-02T15:01:02.000Z</published>
    <updated>2018-07-03T15:21:57.587Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JavaScript面向对象程序设计</strong><br>本文会碰到的知识点：<br>原型、原型链、函数对象、普通对象、继承</p><p>读完本文，可以学到</p><ul><li>面向对象的基本概念</li><li>JavaScript对象属性</li><li>理解JavaScript中的函数对象与普通对象</li><li>理解prototype和proto</li><li>理解原型和原型链</li><li>详解原型链相关的Object方法</li><li>了解如何用ES5模拟类，以及各种方式的优缺点</li><li>了解如何用ES6实现面向对象</li></ul><h1 id="一、面向对象的基本概念"><a href="#一、面向对象的基本概念" class="headerlink" title="一、面向对象的基本概念"></a>一、面向对象的基本概念</h1><p>面向对象也即是OOP，Object Oriented Programming，是计算机的一种编程架构，OOP的基本原则是计算机是由子程序作用的单个或者多个对象组合而成，包含属性和方法的对象是类的实例，但是JavaScript中没有类的概念，而是直接使用对象来实现编程。<br>特性：</p><ul><li>封装：能够将一个实体的信息、功能、响应都封装到一个单独对象中的特性。<br>由于JavaScript没有public、private、protected这些关键字，但是可以利用变量的作用域来模拟public和private封装特性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> insObject = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _name = <span class="string">'hello'</span>; <span class="comment">// private</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// public</span></span><br><span class="line">            <span class="keyword">return</span> _name; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insObject._name; <span class="comment">// undefined</span></span><br><span class="line">insObject.getName(); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure></li></ul><p>这里只是实现了一个简单的版本，private比较好的实现方式可以参考深入理解<code>ES6 145页</code>,protected可以利用ES6的Symbol关键字来实现，这里不展开，有兴趣可以讨论</p><p><strong> 继承：在不改变源程序的基础上进行扩充，原功能得以保存，并且对子程序进行扩展，避免重复代码编写，后面的章节详细描述 </strong></p><h1 id="二、JavaScript对象属性"><a href="#二、JavaScript对象属性" class="headerlink" title="二、JavaScript对象属性"></a>二、JavaScript对象属性</h1><p>想弄懂面向对象，是不是先看看对象是啥呢？<br>我们先看一个题目:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[] + &#123;&#125;; <span class="comment">// "[object Object]"</span></span><br><span class="line">&#123;&#125; + []; <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></p><p>解释：<br>在第一行中，<code>{}</code>出现在<code>+</code>操作符的表达式中，因此被翻译为一个实际的值（一个空<code>object</code>）。而<code>[]</code>被强制转换为””,因此<code>{}</code>也会被强制转换为一个<code>string:&quot;[object Object]&quot;</code>。<br>但在第二行中，<code>{}</code>被翻译为一个独立的<code>{}</code>空代码块儿（它什么也不做）。块儿不需要分号来终结它们，所以这里缺少分号不是一个问题。最终，<code>+ []</code>是一个将<code>[]</code>明确强制转换 为<code>number</code>的表达式，而它的值是<code>0</code>。</p><h2 id="2-1-属性"><a href="#2-1-属性" class="headerlink" title="2.1 属性"></a>2.1 属性</h2><p><em>对象的属性</em></p><ul><li>Object.prototype Object 的原型对象，不是每个对象都有prototype属性</li><li>Object.prototype.proto 不是标准方法，不鼓励使用，每个对象都有proto属性，但是由于浏览器实现方式的不同，proto属性在chrome、firefox中实现了，在IE中并不支持，替代的方法是Object.getPrototypeOf()</li><li>Object.prototype.constructor：用于创建一个对象的原型，创建对象的构造函数<br>可能大家会有一个疑问，为什么上面那些属性要加上prototype<br>在chrome中打印一下<code>var a = { test: &#39;test&#39; }</code></li></ul><p><em>属性描述符</em><br>数据属性：</p><table><thead><tr><th>特性名称</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>value</td><td>属性的值</td><td>undfined</td></tr><tr><td>writable</td><td>是否可以修改属性的值，true表示可以，false表示不可以</td><td>true</td></tr><tr><td>enumerable</td><td>属性值是否可枚举，true表示可枚举for-in, false表示不可枚举</td><td>true</td></tr><tr><td>configurable</td><td>属性的特性是否可配置，表示能否通过delete删除属性后重新定义属性</td><td>true</td></tr></tbody></table><p>例子:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="//sml-myoss.oss-cn-beijing.aliyuncs.com/blog/word_img/20180702231814.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>访问器属性：</p><table><thead><tr><th>特性名称</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>set</td><td>设置属性时调用的函数</td><td>undefined</td></tr><tr><td>get</td><td>写入属性时调用的函数</td><td>undefined</td></tr><tr><td>configurable</td><td>表示能否通过delete删除属性后重新定义属性</td><td>true</td></tr><tr><td>enumerable</td><td>表示能否通过for-in循环返回属性</td><td>true</td></tr></tbody></table><p>访问器属性不能直接定义，一般是通过<code>Object.defineProperty()</code>方法来定义，但是这个方法只支持IE9+， 以前一般用两个非标准方法来实现<code>__defineGetter__()</code>和֖<code>__defineSetter__()</code><br>例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123; <span class="attr">_year</span>: <span class="number">2004</span>, <span class="attr">edition</span>: <span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">"year"</span>, &#123; </span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._year; </span><br><span class="line">    &#125;, </span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (newValue &gt; <span class="number">2004</span>)&#123; </span><br><span class="line">            <span class="keyword">this</span>._year = newValue; </span><br><span class="line">            <span class="keyword">this</span>.edition += newValue - <span class="number">2004</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">book.year = <span class="number">2005</span>; </span><br><span class="line">alert(book.edition);</span><br></pre></td></tr></table></figure></p><h2 id="2-2-方法"><a href="#2-2-方法" class="headerlink" title="2.2 方法"></a>2.2 方法</h2><ul><li>Object.prototype.toString() 返回对象的字符串表示</li><li>Object.prototype.hasOwnProperty() 返回一个布尔值，表示某个对象是否含有指定的属性，而且此属性非原型链继承，也就是说不会检查原型链上的属性</li><li>Object.prototype.isPrototypeOf() 返回一个布尔值，表示指定的对象是否在本对象的原型链中</li><li>Object.prototype.propertyIsEnumerable() 判断指定属性是否可枚举</li><li>Object.prototype.watch() 给对象的某个属性增加监听</li><li>Object.prototype.unwatch() 移除对象某个属性的监听</li><li>Object.prototype.valueOf() 返回指定对象的原始值</li><li>获取和设置属性 <ul><li>Object.defineProperty 定义单个属性</li><li>Object.defineProperties 定义多个属性</li><li>Object.getOwnPropertyDescriptor 获取属性</li></ul></li><li>Object.assign() 拷贝可枚举属性 （ES6新增）</li><li>Object.create() 创建对象</li><li>Object.entries() 返回一个包含由给定对象所有可枚举属性的属性名和属性值组成的 [属性名，属性值] 键值对的数组，数组中键值对的排列顺序和使用for…in循环遍历该对象时返回的顺序一致</li><li>Object.freeze() 冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。也就是说，这个对象永远是不可变的。该方法返回被冻结的对象</li><li>Object.getOwnPropertyNames() 返回指定对象的属性名组成的数组</li><li>Object.getPrototypeOf 返回该对象的原型</li><li>Object.is(value1, value2) 判断两个值是否是同一个值 (ES6 新增)</li><li>Object.keys() 返回一个由给定对象的所有可枚举自身属性的属性名组成的数组，数组中属性名的排列顺序和使用for-in循环遍历该对象时返回的顺序一致</li><li>Object.setPrototypeOf(obj, prototype) 将一个指定的对象的原型设置为另一个对象或者null</li><li>Object.values 返回一个包含指定对象所有的可枚举属性值的数组，数组中的值顺序和使用for…in循环遍历的顺序一样</li></ul><h2 id="2-3-应用"><a href="#2-3-应用" class="headerlink" title="2.3 应用"></a>2.3 应用</h2><p>如何检测某个属性是否在对象中？</p><ul><li><p>in运算符，判断对象是否包含某个属性，会从对象的实例属性、继承属性里进行检测</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dogs</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BigDogs</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.size = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigDogs.prototype = <span class="keyword">new</span> Dogs();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> BigDogs(<span class="string">'big'</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">'size'</span> <span class="keyword">in</span> a;</span><br><span class="line"><span class="string">'name'</span> <span class="keyword">in</span> a;</span><br><span class="line"><span class="string">'age'</span> <span class="keyword">in</span> a;</span><br></pre></td></tr></table></figure></li><li><p>Object.hasOwnProperty()，判断一个对象是否有指定名称的属性，不会检查继承属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.hasOwnProperty(<span class="string">'size'</span>);</span><br><span class="line">a.hasOwnProperty(<span class="string">'name'</span>);</span><br><span class="line">a.hasOwnProperty(<span class="string">'age'</span>);</span><br></pre></td></tr></table></figure></li><li><p>Object.propertyIsEnumerable()，判断指定名称的属性是否为实例属性并且是可枚举的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">Object</span>.create(&#123;&#125;, &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        value: <span class="string">'hello'</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">        value: <span class="number">11</span>,</span><br><span class="line">        enumerable: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> b = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(b, &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        value: <span class="string">'hello'</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">        value: <span class="number">11</span>,</span><br><span class="line">        enumerable: <span class="literal">false</span>,</span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">a.propertyIsEnumerable(<span class="string">'name'</span>);</span><br><span class="line">a.propertyIsEnumerable(<span class="string">'age'</span>);</span><br></pre></td></tr></table></figure></li><li><p>如何枚举对象的属性，并保证不同了浏览器中的行为是一致的？<br><code>for/in</code> 语句，可以遍历可枚举的实例属性和继承属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  supername: <span class="string">'super hello'</span>,</span><br><span class="line">  superage: <span class="string">'super name'</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(b, &#123;</span><br><span class="line">  name: &#123;</span><br><span class="line">      value: <span class="string">'hello'</span>,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  age: &#123;</span><br><span class="line">      value: <span class="number">11</span>,</span><br><span class="line">      enumerable: <span class="literal">false</span>,</span><br><span class="line">  &#125; </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(b, a); <span class="comment">// 设置b的原型是a 等效的是b.__proto__ = a</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(pro <span class="keyword">in</span> b) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(pro); <span class="comment">// name, supername, superage</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Object.keys()， 返回一个数组，内容是对象可枚举的实例属性名称</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> propertyArray = <span class="built_in">Object</span>.keys(b);</span><br><span class="line"> <span class="comment">// name</span></span><br></pre></td></tr></table></figure></li><li><p>Object.getOwnPropertyNames()，返回一个数组，内容是对象所有实例属性，包括可枚举和不可枚举</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> propertyArray = <span class="built_in">Object</span>.getOwnPropertyNames(b);</span><br><span class="line"> <span class="comment">// name, age</span></span><br></pre></td></tr></table></figure></li><li><p>如何判断两个对象是否相等？<br>我只想说，这个问题说简单很简单，说复杂也挺复杂的<a href="https://stackoverflow.com/questions/1068834/object-comparison-in-javascript" target="_blank" rel="noopener">传送门</a><br>我们看个简单版的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEquivalent</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> aProps = <span class="built_in">Object</span>.getOwnPropertyNames(a);</span><br><span class="line">    <span class="keyword">var</span> bProps = <span class="built_in">Object</span>.getOwnPropertyNames(b);</span><br><span class="line">    <span class="keyword">if</span> (aProps.length != bProps.length)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aProps.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> propName = aProps[i];</span><br><span class="line">        <span class="keyword">if</span> (a[propName] !== b[propName]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Outputs: true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEquivalent(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;));</span><br></pre></td></tr></table></figure></li></ul><p>上面这个函数还有啥问题呢</p><pre><code>* 没有对传入参数进行校验，例如判断是否是NaN，或者是其他内置属性* 没有判断传入对象的construct和prototype* 时间算法复杂度是O(n2)</code></pre><p>有同学可能会有疑问，能不能用<code>Object.is</code>，答案是否定的，<code>Object.is</code>简单来说就是在<code>===</code>的基础上特别处理了<code>NaN</code>，<code>+0</code>，<code>-0</code>，保证了<code>-0</code>和<code>+0</code>不相同，<code>Object.is(NaN, NaN)</code>返回<code>true</code>。</p><ul><li>对象的深拷贝和浅拷贝<br>其实如果大家理解了上面的那些方法，是很容易写出深拷贝和浅拷贝的代码的，我们先看一下这两者的却别。<br>浅拷贝仅仅是复制引用，拷贝后a === b， 注意Object.assign方法实现的是浅复制（此处有深刻教训！！！）<br>深拷贝这是创建了一个新的对象，然后把旧的对象中的属性和方法拷贝到新的对象中，拷贝后 a !== b<br>深拷贝的实现由很多例子，例如jQuery的extend和lodash中的cloneDeep, clone。jQuery可以使用$.extend(true, {}, …)来实现深拷贝, 但是jQuery无法复制JSON对象之外的对象，例如ES6引入的Map、Set等。而lodash加入的大量的代码来实现ES6新引入的标准对象 </li></ul><h1 id="三、对象分为函数对象和普通对象"><a href="#三、对象分为函数对象和普通对象" class="headerlink" title="三、对象分为函数对象和普通对象"></a>三、对象分为函数对象和普通对象</h1><p><strong> 什么是函数对象和普通对象？</strong><br>Object、Function、Array、Date等js的内置对象都是函数对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a1</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> a2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> a3 = <span class="keyword">new</span> <span class="built_in">Function</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> b2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c1 = [];</span><br><span class="line"><span class="keyword">const</span> c2 = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d1 = <span class="keyword">new</span> a1();</span><br><span class="line"><span class="keyword">const</span> d2 = <span class="keyword">new</span> b1(); <span class="comment">// ????</span></span><br><span class="line"><span class="keyword">const</span> d3 = <span class="keyword">new</span> c1(); <span class="comment">// ????</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> a1;</span><br><span class="line"><span class="keyword">typeof</span> a2;</span><br><span class="line"><span class="keyword">typeof</span> a3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> b1;</span><br><span class="line"><span class="keyword">typeof</span> b2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> c1;</span><br><span class="line"><span class="keyword">typeof</span> c2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> d1;</span><br></pre></td></tr></table></figure></p><p>上面两行报错的原因，是因为构造函数只能由函数来充当，而b1和c1不是Function的实例，所以不能充当构造器<br><strong> 但是只有Function的实例都是函数对象、其他的实例都是普通对象 </strong><br>我们延伸一下，在看个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> e1 = <span class="function"><span class="keyword">function</span> *(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> e2 = <span class="keyword">new</span> e1();</span><br><span class="line"><span class="comment">// Uncaught TypeError: e1 is not a constructor</span></span><br><span class="line"><span class="built_in">console</span>.log(e1.constructor) <span class="comment">// 是有值的。。。</span></span><br><span class="line"><span class="comment">// 规范里面就不能new</span></span><br><span class="line"><span class="keyword">const</span> e2 = e1();</span><br></pre></td></tr></table></figure></p><p><code>GeneratorFunction</code>是一个特殊的函数对象<br><code>e1.__proto__.__proto__ === Function.prototype</code></p><p><code>e1</code>的原型实际上是一个生成器函数<code>GeneratorFunction</code>，也就是说<br><code>e1.__proto__ === GeneratorFunction.prototype</code></p><p>这行代码有问题么，啊哈哈哈，<code>GeneratorFunction</code>这个关键字主流的JavaScript还木有暴露出来，所以这个大家理解就好啦</p><p>虽然不能直接<code>new e1</code><br>但是可以<code>new e1.constructor();</code>哈哈哈哈</p><h1 id="四、理解prototype和proto"><a href="#四、理解prototype和proto" class="headerlink" title="四、理解prototype和proto"></a>四、理解prototype和proto</h1><table><thead><tr><th>对象类型</th><th>prototype</th><th>proto</th></tr></thead><tbody><tr><td>函数对象</td><td>Yes</td><td>Yes</td></tr><tr><td>普通对象</td><td>No</td><td>Yes</td></tr></tbody></table><ul><li>只有函数对象具有<code>prototype</code>这个属性</li><li><code>prototype</code>和<code>__proto__</code>都是js在定义一个对象时的预定义属性</li><li><code>prototype</code>是被实例的<code>__proto__</code>指向</li><li><code>__proto__</code>指向构造函数的<code>prototype</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> b = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> a <span class="comment">// function</span></span><br><span class="line"><span class="keyword">typeof</span> b <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> a.prototype <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> a.__proto__ <span class="comment">// function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> b.prototype <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> b.__proto__ <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line">a.__proto__ === <span class="built_in">Function</span>.prototype</span><br><span class="line">b.__proto__ === <span class="built_in">Object</span>.prototype</span><br></pre></td></tr></table></figure></li></ul><p>理解了<code>prototype</code>和<code>__proto__</code>之后，我们来看看之前一直说的为什么JavaScript里面都是对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> c = []</span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"></span><br><span class="line">a.__proto__</span><br><span class="line">a.__proto__ === <span class="built_in">Object</span>.prototype</span><br><span class="line"></span><br><span class="line">b.__proto__</span><br><span class="line">b.__proto__ === <span class="built_in">Function</span>.prototype</span><br><span class="line"></span><br><span class="line">c.__proto__</span><br><span class="line">c.__proto__ === <span class="built_in">Array</span>.prototype</span><br><span class="line"></span><br><span class="line">d.__proto__</span><br><span class="line">d.__proto__ === <span class="built_in">Date</span>.prototype</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__ <span class="comment">//null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype</span><br><span class="line"></span><br><span class="line"><span class="built_in">Date</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype</span><br></pre></td></tr></table></figure></p><p>延伸一个问题：如何判断一个变量是否是数组？</p><ul><li>typeof<br>我们上面已经解释了，这些都是普通对象，普通对象是没有<code>prototype</code>的，他们<code>typeof</code>的值都是<code>object</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> []</span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><p>从原型来看, 原理就是看Array是否在a的原型链中<br>a的原型链是 Array-&gt;Object<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line"><span class="built_in">Array</span>.prototype.isPrototypeOf(obj);</span><br></pre></td></tr></table></figure></p><ul><li>instanceof<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line">a <span class="keyword">instanceof</span> <span class="built_in">Array</span></span><br></pre></td></tr></table></figure></li></ul><p>从构造函数入手，但是这个方法和上面的方法都有一问题，不同的框架中创建的数组不会相互共享其<code>prototype</code>属性<br>根据对象的class属性，跨原型调用<code>tostring</code>方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(a);</span><br><span class="line"><span class="comment">// [Object Array]</span></span><br></pre></td></tr></table></figure></p><p>ES5 中所有内置对象的[[Class]]属性的值是由规范定义的，但是 ES6 中已经没有了[[Class]]属性，取代它的是[[NativeBrand]]属性，这个大家有兴趣可以自行去查看规范<br>原理： </p><ol><li>如果<code>this</code>的值为<code>undefined</code>,则返回<code>&#39;[object Undefined]&#39;</code>. </li><li>如果<code>this</code>的值为<code>null</code>,则返回<code>[object Null]</code>. </li><li>让<code>O</code>成为调用<code>ToObject(this)</code>的结果. </li><li>让<code>class</code>成为<code>O</code>的内部属性<code>[[Class]]</code>的值. </li><li>返回三个字符串<code>&#39;[object &#39;</code>, <code>&#39;class&#39;</code>, 以及 <code>&#39;]&#39;</code>连接后的新字符串.</li></ol><p>问题？这个一定是正确的么？不正确为啥？<br>提示ES6的<code>Symbol</code>属性<br><code>Array.isArray()</code><br>部分浏览器中不兼容</p><h1 id="五、理解原型与原型链"><a href="#五、理解原型与原型链" class="headerlink" title="五、理解原型与原型链"></a>五、理解原型与原型链</h1><p>其实上一节中的<code>prototype</code>和<code>proto</code>就是为了构建原型链而存在的，之前也或多或少的说到了原型链这个概念。</p><p>看下面的代码:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Dogs = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dogs.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sijing = <span class="keyword">new</span> Dogs(<span class="string">'sijing'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sijing);</span><br><span class="line"><span class="built_in">console</span>.log(sijing.getName());</span><br></pre></td></tr></table></figure></p><p>这段代码的执行过程 </p><ol><li>首先创建了一个构造函数<code>Dogs</code>，传入一个参数<code>name</code>，<code>Dogs.prototype</code>也会自动创建 </li><li>给对象<code>dogs</code>增加了一个方法 </li><li>通过构造函数<code>Dogs</code>实例化了一个对象<code>sijing</code></li><li>输出<code>sijing</code>的值<br> 可以看到<code>sijing</code>有两个值<code>name</code>和<code>proto</code>,其中<code>proto</code>指向<code>Dogs.prototype</code> </li><li>执行<code>getName</code>方法时，在<code>sijing</code>中找不到这个方法，就会继续向着原型链继续往上找，也就是通过<code>proto</code>，然后就找到了<code>getName</code>方法。</li></ol><p>这个过程实际上就是原型继承，实际上JavaScript的原型继承就是利用了<code>proto</code>并借助<code>prototype</code>来实现的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sijing.__proto__ === <span class="built_in">Function</span>.prototype</span><br><span class="line"></span><br><span class="line">Dogs.prototype <span class="comment">// 指向什么</span></span><br><span class="line">Dogs.prototype.__proto__ <span class="comment">// 指向什么</span></span><br><span class="line">Dogs.prototype.__proto__.__proto__ <span class="comment">// 指向什么</span></span><br></pre></td></tr></table></figure></p><p>上面例子中<code>getName</code>最终是查找到了，那么如果在原型链中一直没查找到，会怎么样？<br>例如<code>console.log(sijing.age)</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sijing <span class="comment">// 是一个对象可以继续</span></span><br><span class="line">sijing.age <span class="comment">// 不存在，继续</span></span><br><span class="line">sijing.__proto__ <span class="comment">// 是一个对象可以继续</span></span><br><span class="line">sijing.__proto__.age <span class="comment">// 不存在，继续</span></span><br><span class="line">sijing.__proto__.__proto__ <span class="comment">// 是个对象可以继续</span></span><br><span class="line">sijing.__proto__.__proto__.age <span class="comment">// 不存在，继续</span></span><br><span class="line">sijing.__proto__.__proto__.__proto__ <span class="literal">null</span>，<span class="comment">// 不是对象，到头啦</span></span><br></pre></td></tr></table></figure></p><p><strong> 原型链 </strong> 的概念其实不重要，重要的是要理解，简单来说，原型链就是利用原型让一个引用类型继承另一个应用类型的属性和方法。</p><p>还有三点需要注意的:</p><ul><li>任何内置函数对象（类）本身的 <code>_proto_</code>都指向<code>Function</code>的原型对象；</li><li>除了<code>Object</code>的原型对象的<code>_proto_</code>指向<code>null</code>，其他所有内置函数对象的原型对象的<code>_proto_</code>都指向<code>object</code>。</li><li>所有构造函数的的<code>prototype</code>方法的<code>proto</code>都指向<code>Object.prototype</code>（除了….<code>Object.prototype</code>自身）</li></ul><p>如果理解了上面这些内容，大家可以自行描述一下，构造函数、原型和实例之间的关系.</p><ul><li>构造函数首字母必须大写，用来区分普通函数，内部使用<code>this</code>指针，指向要生成的实例对象，通过<code>new</code>来生成实例对象。 </li><li>实例就是通过<code>new</code>一个构造函数产生的对象，它有一个属性<code>[[prototype]]</code>指向原型 </li><li>原型中有一个属性<code>[[constructor]]</code>，指向构造函数</li></ul><h1 id="六、与原型链相关的方法"><a href="#六、与原型链相关的方法" class="headerlink" title="六、与原型链相关的方法"></a>六、与原型链相关的方法</h1><h2 id="6-1-hasOwnProperty"><a href="#6-1-hasOwnProperty" class="headerlink" title="6.1 hasOwnProperty"></a>6.1 hasOwnProperty</h2><p><code>Object.hasOwnProperty()</code>返回一个布尔值，表示某个对象的实例是否含有指定的属性，而且此属性非原型链继承。用来判断属性是来自实例属性还是原型属性。类似还有<code>in</code>操作符，<code>in</code>操作符只要属性存在，不管实在实例中还是原型中，就会返回<code>true</code>。同时使用<code>in</code>和<code>hasOwnProperty</code>就可以判断属性是在原型中还是在实例中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Dogs = <span class="function"><span class="keyword">function</span> (<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dogs.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sijing = <span class="keyword">new</span> Dogs(<span class="number">14</span>);</span><br><span class="line">sijing.hasOwnProperty(<span class="string">'age'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="6-2-isPrototypeOf"><a href="#6-2-isPrototypeOf" class="headerlink" title="6.2 isPrototypeOf"></a>6.2 isPrototypeOf</h2><p><code>Object.prototype.isPrototypeOf()</code>返回一个布尔值，表示指定的对象是否在本对象的原型链中<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Dogs = <span class="function"><span class="keyword">function</span> (<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dogs.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sijing = <span class="keyword">new</span> Dogs(<span class="number">11</span>);</span><br><span class="line"><span class="built_in">Object</span>.prototype.isPrototypeOf(Dogs);</span><br><span class="line">Dogs.prototype.isPrototypeOf(sijing);</span><br></pre></td></tr></table></figure></p><h2 id="6-3-getPrototypeOf"><a href="#6-3-getPrototypeOf" class="headerlink" title="6.3 getPrototypeOf"></a>6.3 getPrototypeOf</h2><p><code>Object.getPrototypeOf</code>返回该对象的原型<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Dogs = <span class="function"><span class="keyword">function</span> (<span class="params">age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dogs.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sijing = <span class="keyword">new</span> Dogs(<span class="number">11</span>);</span><br><span class="line">sijing.__proto__ === <span class="built_in">Object</span>.getPrototypeOf(sijing)</span><br></pre></td></tr></table></figure></p><h1 id="七、ES5-对象继承"><a href="#七、ES5-对象继承" class="headerlink" title="七、ES5 对象继承"></a>七、ES5 对象继承</h1><h2 id="7-1-原型继承"><a href="#7-1-原型继承" class="headerlink" title="7.1 原型继承"></a>7.1 原型继承</h2><p>原型继承就是利用<strong> 原型链 </strong>来实现继承<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.supername = <span class="string">'super'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.getSuperName= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.supername;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subname=<span class="string">'subname'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"></span><br><span class="line">SubType.prototype.getSubName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance1.getSubName());</span><br><span class="line"><span class="built_in">console</span>.log(instance1.getSuperName());</span><br></pre></td></tr></table></figure></p><p>需要注意的地方：<br>实现原型继承的时候不要使用对象字面量创建原型方法，因为这样做，会重写原型链。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.supername = <span class="string">'super'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.getSuperName= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.supername;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subname=<span class="string">'subname'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"></span><br><span class="line">SubType.prototype =  &#123;</span><br><span class="line">    getSubName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.subname;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance1.getSubName());</span><br><span class="line"><span class="built_in">console</span>.log(instance1.getSuperName()); <span class="comment">// error</span></span><br></pre></td></tr></table></figure></p><p>上面使用<code>SubType.prototype = {...}</code>之后，<code>SubType</code>的原型就是<code>Object</code>了，而不是<code>SuperType</code>了。</p><p>优点：原型定义的属性和方法可以复用<br>缺点： </p><ol><li>引用类型的原型属性会被所有实例共享 </li><li>创建子对象时，不能向父对象的构造函数中传递参数</li></ol><h2 id="7-2-构造函数继承"><a href="#7-2-构造函数继承" class="headerlink" title="7.2 构造函数继承"></a>7.2 构造函数继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    name: <span class="string">'a'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'window'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getName() <span class="comment">// window</span></span><br><span class="line">getName.call(a) <span class="comment">// a</span></span><br></pre></td></tr></table></figure><p>执行<code>getName()</code>时，函数体的<code>this</code>指向<code>window</code>，而执行<code>getName.call(a)</code>时，函数体的<code>this</code>指向的是<code>a</code>对象，所以就可以理解啦。接下来我们看如何实现构造函数继承<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 继承SuperType</span></span><br><span class="line">    SuperType.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">'blue'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(instance1.colors); <span class="comment">// red, green, blue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line"><span class="built_in">console</span>.log(instance2.colors); <span class="comment">// red, green</span></span><br></pre></td></tr></table></figure></p><p><code>SuperType.call(this)</code>这一行代码，实际上意思是在<code>SubType</code>的实例初始化过程中，调用了<code>SuperType</code>的构造函数，因此<code>SubType</code>的每个实例都有<code>colors</code>这个属性</p><p>优点：子对象可以传递参数给父对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    name = name || <span class="string">'hello'</span>;</span><br><span class="line">    SuperType.call(<span class="keyword">this</span>, name);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">'scofield'</span>, <span class="number">28</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.name); <span class="comment">//</span></span><br><span class="line"><span class="built_in">console</span>.log(instance1.age); <span class="comment">//</span></span><br></pre></td></tr></table></figure></p><p>需要注意的地方是在调用父对象的构造函数之后，再给子类型中的定义属性，否则会被重写。</p><p>缺点：方法都需要在构造函数中定义，难以做到函数的复用，而且在父对象的原型上定义的方法，对于子类型是不可见的。 ??? 为什么不可见<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.prefix = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'prefix'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    SuperType.call(<span class="keyword">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">'scofield'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.name);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.prefix);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.getName()); <span class="comment">// Uncaught TypeError: instance1.getName is not a function</span></span><br></pre></td></tr></table></figure></p><h2 id="7-3-组合式继承"><a href="#7-3-组合式继承" class="headerlink" title="7.3 组合式继承"></a>7.3 组合式继承</h2><p><strong> 组合式继承 </strong> 顾名思义，就是组合两种模式实现JavaScript的继承，借助 <strong> 原型链 </strong> 和 <strong> 构造函数 </strong> 来实现。这样子在原型上定义方法实现了函数的复用，而且能够保证每个实例都有自己的属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.con = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    SuperType.call(<span class="keyword">this</span>, name);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">SubType.prototype.constructor = SubType;</span><br><span class="line">SubType.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">'li'</span>, <span class="number">18</span>);</span><br><span class="line">instance1.con.push(<span class="string">'test1'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.con); <span class="comment">// test1</span></span><br><span class="line"><span class="built_in">console</span>.log(instance1.getAge()); <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(instance1.getName()); <span class="comment">// li</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType(<span class="string">'hang'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance1.con); <span class="comment">// test1</span></span><br><span class="line"><span class="built_in">console</span>.log(instance1.getAge()); <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(instance1.getName()); <span class="comment">// hang</span></span><br></pre></td></tr></table></figure></p><p>优点：弥补了 <strong> 原型继承 </strong>和 <strong> 构造函数 </strong> 的缺点<br>缺点：父类构造函数调用了两次</p><h2 id="7-4-原型式继承"><a href="#7-4-原型式继承" class="headerlink" title="7.4 原型式继承"></a>7.4 原型式继承</h2><p>原型式继承并没有使用严格意义上的构造函数，借助原型可以基于已有的对象创建新的对象，例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObject</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">newOrient</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    newOrient.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> newOrient();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单来说<code>createObject</code>函数，对传入的<code>o</code>对象进行的一次浅拷贝。在ES5中新增加了一个方法<code>Object.create()</code>, 它的作用和<code>createObject</code>是一样的，但是只支持IE9+。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Dogs = &#123;</span><br><span class="line">    name: <span class="string">'jingmao'</span>,</span><br><span class="line">    age: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> BigDogs = <span class="built_in">Object</span>.create(Dogs);</span><br><span class="line">BigDogs.name= <span class="string">'bigjingmao'</span>;</span><br><span class="line">BigDogs.size = <span class="string">'big'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(BigDogs.age);</span><br></pre></td></tr></table></figure></p><p>其中<code>Object.create</code>还支持传入第二个参数，参数与<code>Object.defineProperties()</code>方法的格式相同，并且会覆盖原型上的同名属性。</p><h2 id="7-5-寄生式继承"><a href="#7-5-寄生式继承" class="headerlink" title="7.5 寄生式继承"></a>7.5 寄生式继承</h2><p><strong>寄生式继承</strong> 其实和 <strong>原型式继承</strong> 很类似，区别在于，<strong>寄生式继承</strong> 创建的一个函数把所有的事情做完了，例如给新的对象增加属性和方法。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clone = <span class="built_in">Object</span>.create(o);</span><br><span class="line">    clone.size = <span class="string">'big'</span>;</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Dogs = &#123;</span><br><span class="line">    name: <span class="string">'jingmao'</span>,</span><br><span class="line">    age: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> BigDogs = createAnother(Dogs);</span><br><span class="line"><span class="built_in">console</span>.log(BigDogs.size);</span><br></pre></td></tr></table></figure></p><h2 id="7-6-寄生组合式继承"><a href="#7-6-寄生组合式继承" class="headerlink" title="7.6 寄生组合式继承"></a>7.6 寄生组合式继承</h2><p>到最后一个了，看看我们之前遗留的问题:<br><strong>组合继承</strong> 会调用两次父对象的构造函数，并且父类型的属性存在两组，一组在实例上，一组在SubType的原型上。解决这个问题的方法就是 <strong>寄生组合式继承</strong>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>)</span>&#123; </span><br><span class="line">    <span class="comment">// 继承父类的原型</span></span><br><span class="line">    <span class="keyword">var</span> prototype = <span class="built_in">Object</span>.create(superType.prototype);</span><br><span class="line">    <span class="comment">// 重写被污染的construct</span></span><br><span class="line">    prototype.constructor = subType; </span><br><span class="line">    <span class="comment">// 重写子类的原型  </span></span><br><span class="line">    subType.prototype = prototype; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个函数就是 <strong>寄生组合式继承</strong> 的最简单的实现方式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">this</span>.name = name; </span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="keyword">this</span>.name); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    SuperType.call(<span class="keyword">this</span>, name);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(SubType, SuperType);</span><br><span class="line"></span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    alert(<span class="keyword">this</span>.age); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType(<span class="string">'hello'</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">instance1.__proto__.constructor == SubType</span><br></pre></td></tr></table></figure></p><p>可以看到 </p><ol><li>子类继承了父类的属性和方法，同时属性没有创建在原型链上，因此多个子类不会共享同一个属性。 </li><li>子类可以动态传递参数给父类 </li><li>父类构造函数只执行了一次</li></ol><p>但是还有一个问题：<br>子类如果在原型上添加方法，必须要在继承之后添加，否则会覆盖原来原型上的方法。但是如果这两个类是已存在的类，就不行了</p><p>优化一下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>)</span>&#123; </span><br><span class="line">    <span class="comment">// 继承父类的原型</span></span><br><span class="line">    <span class="keyword">var</span> prototype = <span class="built_in">Object</span>.create(superType.prototype);</span><br><span class="line">    <span class="comment">// 重写被污染的construct</span></span><br><span class="line">    prototype.constructor = subType; </span><br><span class="line">    <span class="comment">// 重写子类的原型  </span></span><br><span class="line">    subType.prototype = <span class="built_in">Object</span>.assign(prototype, subType.prototype); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>虽然通过<code>Object.assign</code>来进行<code>copy</code>解决了覆盖原型类型的方法的问题，但是<code>Object.assign</code>只能够拷贝可枚举的方法，而且如果子类本身就继承了一个类，这个办法也不行。</p><h1 id="八、ES6-实现继承"><a href="#八、ES6-实现继承" class="headerlink" title="八、ES6 实现继承"></a>八、ES6 实现继承</h1><p>我们知道了ES5中可以通过原型链来实现继承，ES6提供了extends关键字来实现继承，这相对而言更加清晰和方便，首先看看ES6 Class的语法，此处参考<a href="http://es6.ruanyifeng.com/#docs/class" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/class</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;JavaScript面向对象程序设计&lt;/strong&gt;&lt;br&gt;本文会碰到的知识点：&lt;br&gt;原型、原型链、函数对象、普通对象、继承&lt;/p&gt;
&lt;p&gt;读完本文，可以学到&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面向对象的基本概念&lt;/li&gt;
&lt;li&gt;JavaScript对象属性&lt;
      
    
    </summary>
    
      <category term="JS" scheme="http://blog.sgoldl.top/categories/JS/"/>
    
    
      <category term="面向对象" scheme="http://blog.sgoldl.top/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="继承" scheme="http://blog.sgoldl.top/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的闭包</title>
    <link href="http://blog.sgoldl.top/2018/07/01/js_closure/"/>
    <id>http://blog.sgoldl.top/2018/07/01/js_closure/</id>
    <published>2018-07-01T08:04:02.000Z</published>
    <updated>2018-07-01T14:06:20.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>先来说下什么是作用域，简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。他减少了名称冲突，并且提供了自动内存管理。<br>在JavaScript中，变量的作用域有全局作用域和局部作用域两种。</p><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    num2 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上三个对象 <code>num1</code>, <code>num2</code> 和 <code>fun1</code> 均是全局作用域，这里要注意的是 <strong> 末定义直接赋值的变量自动声明为拥有全局作用域 </strong>；</p><h2 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrap</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="string">"我被wrap包裹起来了，wrap外部无法直接访问到我"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerFun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//外部无法访问我</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>当代码在一个环境中执行时，会创建变量对象的一个作用域链。<br>[{当前环境的变量对象}，{外层变量对象}，{外层的外层的变量对象}, {window全局变量对象}] 每个数组单元就是作用域链的一块，这个块就是我们的变量对象。<br>作用于链的前端，始终都是当前执行的代码所在环境的变量对象。全局执行环境的变量对象也始终都是链的最后一个对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">12</span>;</span><br><span class="line">    fun(a);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="number">8</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br><span class="line">foo();</span><br></pre></td></tr></table></figure></p><p>再来看上面这个简单的例子，我们可以先思考一下，每个执行环境下的变量对象都是什么？ 这两个函数它们的变量对象分别都是什么？</p><p>我们以fun为例，当我们调用它时，会创建一个包含 <code>arguments</code>，<code>a</code>，<code>b</code>的 <strong> 活动对象 </strong>，对于函数而言，在执行的最开始阶段它的活动对象里只包含一个变量，即<code>arguments</code>(当执行流进入，再创建其他的活动对象)。</p><p>在活动对象中，它依然表示当前参数集合。对于函数的活动对象，我们可以想象成两部分，一个是固定的<code>arguments</code>对象，另一部分是函数中的局部变量。而在此例中，a和b都被算入是局部变量中，即便a已经包含在了<code>arguments中</code>，但他还是属于。</p><p>有没有发现在环境栈中，所有的执行环境都可以组成相对应的作用域链。我们可以在环境栈中非常直观的拼接成一个相对作用域链。</p><p>下面我们大致说下这段代码的执行流程：</p><ol><li>在创建<code>foo</code>的时候，作用域链已经预先包含了一个全局对象，并保存在内部属性<code>[[ Scope ]]</code>当中。</li><li>执行<code>foo</code>函数，创建执行环境与活动对象后，取出函数的内部属性<code>[[Scope]]</code>构建当前环境的作用域链(取出后，只有全局变量对象，然后此时追加了一个它自己的活动对象)。</li><li>执行过程中遇到了<code>fun</code>，从而继续对<code>fun</code>使用上一步的操作。</li><li><code>fun</code>执行结束，移出环境栈。<code>foo</code>因此也执行完毕，继续移出。</li><li>javscript 监听到<code>foo</code>没有被任何变量所引用，开始实施垃圾回收机制，清空占用内存。</li></ol><p>作用域链其实就是引用了当前执行环境的变量对象的指针列表，它只是引用，但不是包含，因为它的形状像链条，它的执行过程也非常符合，所以我们都称之为 <strong> 作用域链 </strong>，而当我们弄懂了这其中的奥秘，就可以抛开这种形式上的束缚，从原理上出发。</p><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><p>闭包，官方对闭包的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。</p><h2 id="闭包的特点："><a href="#闭包的特点：" class="headerlink" title="闭包的特点："></a>闭包的特点：</h2><ol><li>作为一个函数变量的一个引用，当函数返回时，其处于激活状态。</li><li>一个闭包就是当一个函数返回时，一个没有释放资源的栈区。<br>其实就是 <strong> 有权访问另一个函数作用域中的变量的函数 </strong>。简单说就是，假设函数a是定义在函数b中的函数，那么函数a就是一个闭包。正常情况下，在函数的外部访问不到函数内部的变量，但有了闭包就可以间接的实现访问内部变量的需要。也就是说，<strong> 闭包是连接函数内部和外部的桥梁 </strong>。<h2 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h2></li><li>访问函数内部的变量。</li><li>让被引用的变量值始终保持在内存中。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(++a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn2 = fn1();</span><br><span class="line"></span><br><span class="line">fn2();        <span class="comment">//输出2</span></span><br><span class="line"></span><br><span class="line">fn2();        <span class="comment">//输出3</span></span><br></pre></td></tr></table></figure><p>在这段代码中，fn1中的闭包函数被当作结果返回，在闭包中的引用的变量a因为被引用而没有被清除，一直保存在内存当中，所以执行fn2的时候会输出不断增加的结果：2和3。</p><p>当闭包中引用了函数中的变量时，那么，这个变量就会保存在内存中。也就是上面提到的闭包的第二个作用。之所以为这样，是因为JavaScript的回收机制。</p><p>基本所有浏览器都是使用“标记清除”的方式回收内存。也就是说，当变量进入执行环境的时候（在函数中声明一个变量），就给变量添加标记，而当函数执行完的，变量不再被引用的时候，再添加删除的标记，垃圾收集器就会自动清楚这个变量占有的内存。但在闭包中引用了函数中的变量，而闭包又被当作结果返回时，闭包中的因为被引用就不会被清除</p><h2 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h2><ol><li>匿名自执行函数<br>我们知道所有的变量，如果不加上var关键字，则默认的会添加到全局对象的属性上去，这样的临时变量加入全局对象有很多坏处，<br>比如：别的函数可能误用这些变量；造成全局对象过于庞大，影响访问速度(因为变量的取值是需要从原型链上遍历的)。<br>除了每次使用变量都是用var关键字外，我们在实际情况下经常遇到这样一种情况，即有的函数只需要执行一次，其内部变量无需维护，<br>比如UI的初始化，那么我们可以使用闭包：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data= &#123;    </span><br><span class="line">    table : [],    </span><br><span class="line">    tree : &#123;&#125;    </span><br><span class="line">&#125;;    </span><br><span class="line">     </span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">dm</span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dm.table.rows; i++)&#123;    </span><br><span class="line">        <span class="keyword">var</span> row = dm.table.rows[i];    </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; row.cells; i++)&#123;    </span><br><span class="line">            drawCell(i, j);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">       </span><br><span class="line">&#125;)(data);</span><br></pre></td></tr></table></figure></li></ol><p>我们创建了一个匿名的函数，并立即执行它，由于外部无法引用它内部的变量，因此在函数执行完后会立刻释放资源，关键是不污染全局对象。</p><ol start="2"><li>结果缓存<br>我们开发中会碰到很多情况，设想我们有一个处理过程很耗时的函数对象，每次调用都会花费很长时间，</li></ol><p>那么我们就需要将计算出来的值存储起来，当调用这个函数的时候，首先在缓存中查找，如果找不到，则进行计算，然后更新缓存并返回值，如果找到了，直接返回查找到的值即可。闭包正是可以做到这一点，因为它不会释放外部的引用，从而函数内部的值可以得以保留。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CachedSearchBox = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> cache = &#123;&#125;,    </span><br><span class="line">        count = [];    </span><br><span class="line">    <span class="keyword">return</span> &#123;    </span><br><span class="line">        attachSearchBox : <span class="function"><span class="keyword">function</span>(<span class="params">dsid</span>)</span>&#123;    </span><br><span class="line">            <span class="keyword">if</span>(dsid <span class="keyword">in</span> cache)&#123;<span class="comment">//如果结果在缓存中    </span></span><br><span class="line">                <span class="keyword">return</span> cache[dsid];<span class="comment">//直接返回缓存中的对象    </span></span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="keyword">var</span> fsb = <span class="keyword">new</span> uikit.webctrl.SearchBox(dsid);<span class="comment">//新建    </span></span><br><span class="line">            cache[dsid] = fsb;<span class="comment">//更新缓存    </span></span><br><span class="line">            <span class="keyword">if</span>(count.length &gt; <span class="number">100</span>)&#123;<span class="comment">//保正缓存的大小&lt;=100    </span></span><br><span class="line">                <span class="keyword">delete</span> cache[count.shift()];    </span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="keyword">return</span> fsb;          </span><br><span class="line">        &#125;,    </span><br><span class="line">     </span><br><span class="line">        clearSearchBox : <span class="function"><span class="keyword">function</span>(<span class="params">dsid</span>)</span>&#123;    </span><br><span class="line">            <span class="keyword">if</span>(dsid <span class="keyword">in</span> cache)&#123;    </span><br><span class="line">                cache[dsid].clearSelection();      </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;;    </span><br><span class="line">&#125;)();    </span><br><span class="line">     </span><br><span class="line">CachedSearchBox.attachSearchBox(<span class="string">"input"</span>);</span><br></pre></td></tr></table></figure></p><p>这样我们在第二次调用的时候，就会从缓存中读取到该对象。</p><ol start="3"><li><p>封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">    <span class="comment">//变量作用域为函数内部，外部无法访问    </span></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"default"</span>;       </span><br><span class="line">       </span><br><span class="line">    <span class="keyword">return</span> &#123;    </span><br><span class="line">        getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> name;    </span><br><span class="line">        &#125;,    </span><br><span class="line">        setName : <span class="function"><span class="keyword">function</span>(<span class="params">newName</span>)</span>&#123;    </span><br><span class="line">            name = newName;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;();    </span><br><span class="line">     </span><br><span class="line">print(person.name);<span class="comment">//直接访问，结果为undefined    </span></span><br><span class="line">print(person.getName());    </span><br><span class="line">person.setName(<span class="string">"abruzzi"</span>);    </span><br><span class="line">print(person.getName());    </span><br><span class="line">   </span><br><span class="line">得到结果如下：  </span><br><span class="line">   </span><br><span class="line"><span class="comment">// undefined  </span></span><br><span class="line"><span class="comment">// default  </span></span><br><span class="line"><span class="comment">// abruzzi</span></span><br></pre></td></tr></table></figure></li><li><p>实现类和继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"default"</span>;       </span><br><span class="line">       </span><br><span class="line">    <span class="keyword">return</span> &#123;    </span><br><span class="line">       getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span><br><span class="line">           <span class="keyword">return</span> name;    </span><br><span class="line">       &#125;,    </span><br><span class="line">       setName : <span class="function"><span class="keyword">function</span>(<span class="params">newName</span>)</span>&#123;    </span><br><span class="line">           name = newName;    </span><br><span class="line">       &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.setName(<span class="string">"Tom"</span>);</span><br><span class="line">alert(p.getName());</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Jack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="comment">//继承自Person</span></span><br><span class="line">Jack.prototype = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">//添加私有方法</span></span><br><span class="line">Jack.prototype.Say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">"Hello,my name is Jack"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> j = <span class="keyword">new</span> Jack();</span><br><span class="line">j.setName(<span class="string">"Jack"</span>);</span><br><span class="line">j.Say();</span><br><span class="line">alert(j.getName());</span><br></pre></td></tr></table></figure></li></ol><p>我们定义了<code>Person</code>，它就像一个类，我们<code>new</code>一个<code>Person</code>对象，访问它的方法。</p><p>下面我们定义了<code>Jack</code>，继承<code>Person</code>，并添加自己的方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;作用域&quot;&gt;&lt;a href=&quot;#作用域&quot; class=&quot;headerlink&quot; title=&quot;作用域&quot;&gt;&lt;/a&gt;作用域&lt;/h1&gt;&lt;p&gt;先来说下什么是作用域，简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。他减少了名称冲突，并且
      
    
    </summary>
    
      <category term="JS" scheme="http://blog.sgoldl.top/categories/JS/"/>
    
    
      <category term="闭包" scheme="http://blog.sgoldl.top/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>为什么要写博客</title>
    <link href="http://blog.sgoldl.top/2018/07/01/blog/"/>
    <id>http://blog.sgoldl.top/2018/07/01/blog/</id>
    <published>2018-07-01T07:38:40.000Z</published>
    <updated>2018-07-01T07:45:18.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、前言：你的博客你做主"><a href="#一、前言：你的博客你做主" class="headerlink" title="一、前言：你的博客你做主"></a>一、前言：你的博客你做主</h1><p>在我刚入行时，还是个普通人，毕竟我的专业也是学这个的，每天浏览各种技术博客和论坛。可时间长了，我就发现，你不用Google真的就搜不出来你想要的东西，即使搜出来了，博客上所写的内容，零零散散，也不能满足你，你还要去搜，去找，等到各方面找全了，开始实际作战了，本地应用又会出现问题（很好理解，你本地的各种环境可能和网上不一样），为了解决问题，你还是会去搜索找博客，结果呢还是像上面一样，时间都浪费在了搜集资料和整理上，大家的项目都是公司项目，这边你还没等处理完问题，老板就来催了，加班自然跑不了。<br>其实没有所谓的好的博客，你自己写的博客，排不排版，贴不贴图，公不公开，都是随你，你开心就好。但是真的想要访问量高、评论数多，充分显示出你的专业性，还是需要下一番功夫去思考的。所以本文是一篇专业水文，建议在各种碎片化时间服用。</p><h1 id="二、写博客的态度"><a href="#二、写博客的态度" class="headerlink" title="二、写博客的态度"></a>二、写博客的态度</h1><p>你为什么想写博客？给别人看？给自己看？还有吗？你写博客时意识到自己在做什么吗？你会说码字啊。呵呵。在我看来，你写博客的过程就是在创造资源，为世界上成PB量级的数据做贡献。只不过这个资源有好有坏。如果谈到资源，就会涉及管理、使用、销毁等等。你不止是在写博客，而是在梳理你的知识技能，构建你的知识体系，在创造属于你自己的知识宝库。有那样一句玩笑话：一入IT深似海，从此妹子是路人，也侧面说明了IT行业知识、技术相当广和深，我们更需要通过博客进行知识的积累。只是你没意识到这一点，所以你才会随随便便写了两篇博客，然后就放弃了。如果你能坚持的去写一些高质量的博客，相信我，无论你何时回翻看这些博客，你都会有一种自豪感。</p><h1 id="三、高质量技术博客的特点"><a href="#三、高质量技术博客的特点" class="headerlink" title="三、高质量技术博客的特点"></a>三、高质量技术博客的特点</h1><p>来源权威，有因有果，可迭代，互动性，不啰嗦，最好是原创。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、前言：你的博客你做主&quot;&gt;&lt;a href=&quot;#一、前言：你的博客你做主&quot; class=&quot;headerlink&quot; title=&quot;一、前言：你的博客你做主&quot;&gt;&lt;/a&gt;一、前言：你的博客你做主&lt;/h1&gt;&lt;p&gt;在我刚入行时，还是个普通人，毕竟我的专业也是学这个的，每天浏
      
    
    </summary>
    
    
      <category term="First" scheme="http://blog.sgoldl.top/tags/First/"/>
    
  </entry>
  
</feed>
